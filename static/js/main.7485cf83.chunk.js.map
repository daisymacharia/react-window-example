{"version":3,"sources":["components/Table/index.js","components/Avatar/index.js","components/Filter/index.js","components/Search/index.js","components/Button/index.js","containers/Sidebar/index.js","containers/MainContent/index.js","App.js","serviceWorker.js","index.js"],"names":["FixedColumn","columnIndex","rowIndex","style","data","className","ColumnLabel","Cell","memo","values","Object","keys","areEqual","MultiGrid","height","width","users","rowRef","useRef","gridRef","headerRef","itemData","columnCount","length","rowCount","columnWidth","rowHeight","overscanColumnCount","overscanRowCount","ref","overflowX","overflowY","borderBottom","borderRight","position","left","overflow","background","top","onScroll","event","current","scrollTo","scrollLeft","scrollTop","outerRef","VirtualizedTable","Avatar","borderRadius","src","alt","Filter","label","value","Search","placeholder","Button","color","textColor","nav","icon","Sidebar","map","navItem","key","MainContent","active","App","useState","setUsers","useEffect","usersList","i","user","name","Faker","firstName","company","companyName","email","internet","phoneNumber","phone","city","address","state","revenue","Math","random","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7485cf83.chunk.js","sourcesContent":["import React, { Fragment, useRef, memo } from 'react';\nimport { FixedSizeGrid as Grid, areEqual } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport './styles.scss';\n\nconst FixedColumn = ({ columnIndex, rowIndex, data, style }) => {\n    return (\n        <div className=\"fixed-column\" style={{ ...style }}>\n            {rowIndex}\n        </div>\n        // {/* <div style={{ display: 'flex', alignItems: 'center', padding: '0 1rem', ...style }} > {data[ rowIndex ].name}</ div> */ }\n\n    )\n}\n\nconst ColumnLabel = ({ columnIndex, rowIndex, data, style }) => {\n    return <div className='column-label' style={{ ...style }}>\n        {data[ columnIndex ]}\n    </div>\n}\n\nconst Cell = memo(({ columnIndex, rowIndex, data, style }) => {\n    let values = Object.keys(data[ 0 ])[ columnIndex ]\n    // let row = data[ rowIndex ]\n\n    return (\n        <div className='cell' style={{ ...style }}>{data[ rowIndex ][ values ]}</div>\n    )\n}, areEqual)\n\nconst MultiGrid = ({ height, width, users }) => {\n    const rowRef = useRef()\n    const gridRef = useRef()\n    const headerRef = useRef()\n    const onScrollNative = event => {\n        headerRef.current.scrollTo({ scrollLeft: event.scrollLeft });\n        rowRef.current.scrollTo({\n            scrollTop: event.scrollTop\n        });\n    };\n\n    return (\n        <Fragment>\n            <Grid\n                itemData={Object.keys(users[ 0 ])}\n                columnCount={Object.values(users[ 0 ]).length}\n                rowCount={1}\n                columnWidth={250}\n                rowHeight={35}\n                height={35}\n                width={width - 55}\n                overscanColumnCount={1}\n                overscanRowCount={1}\n                ref={headerRef}\n                style={{\n                    overflowX: 'hidden',\n                    overflowY: 'hidden',\n                    borderBottom: `1px solid #d4d4d4`,\n                    borderRight: `1px solid #d4d4d4`,\n                    position: 'absolute',\n                    left: 50\n                }}\n            >\n                {ColumnLabel}\n            </Grid>\n            <Grid\n                className=\"Grid\"\n                itemData={users}\n                columnCount={1}\n                columnWidth={50}\n                height={height}\n                overscanColumnCount={1}\n                overscanRowCount={1}\n                ref={rowRef}\n                rowCount={Object.keys(users).length}\n                rowHeight={35}\n                style={{\n                    overflow: 'hidden',\n                    background: 'white',\n                    borderRight: `1px solid #d4d4d4`,\n                    // borderTop: `1px solid #d4d4d4`,\n                    position: 'absolute', top: 35,\n                }}\n                width={50}\n            >\n                {FixedColumn}\n            </Grid>\n            <Grid\n                className=\"Grid\"\n                columnCount={Object.keys(users[ 0 ]).length}\n                itemData={users}\n                columnWidth={250}\n                height={height}\n                onScroll={onScrollNative}\n                outerRef={gridRef}\n                overscanColumnCount={1}\n                overscanRowCount={1}\n                rowCount={Object.keys(users).length}\n                rowHeight={35}\n                style={{ position: 'absolute', top: 35, left: 50 }}\n                width={width - 50}\n            >\n                {Cell}\n            </Grid>\n        </Fragment>\n    )\n}\n\nconst VirtualizedTable = ({ users }) => {\n    return (\n        <AutoSizer>\n            {({ width, height }) => (\n                <MultiGrid height={height} width={width} users={users} />\n            )}\n        </AutoSizer>\n    )\n}\n\nexport default VirtualizedTable","import React from 'react'\n\nconst Avatar = () => {\n    return (\n        <div style={{ width: '1.5rem', height: '1.5rem', borderRadius: \"50%\" }}>\n            <img style={{ width: '100%', height: '100%', borderRadius: '50%' }} src=\"https://res.cloudinary.com/daisymacharia/image/upload/v1585563565/_MG_1863.jpg\" alt=\"profile\" />\n        </div>\n    )\n}\n\nexport default Avatar;","import React from 'react'\nimport './styles.scss';\n\nconst Filter = ({ label, value }) => {\n    return (\n        <div className='filter'>\n            <div className='label' >{label}</div>\n            <div className='value'>{value}</div>\n        </div>\n    )\n}\n\nexport default Filter;","import React from 'react';\nimport { MdSearch as SearchIcon } from 'react-icons/md';\nimport './styles.scss';\n\nconst Search = () => {\n    return (\n        <div className='search'>\n            <input className='search-input' placeholder={'Search for an account'} />\n            <SearchIcon />\n        </div>\n    )\n}\n\nexport default Search","import React from 'react';\nimport './styles.scss';\n\nconst Button = ({ color, label, textColor }) => {\n    return <div className=\"button\">\n        <button style={{ background: color, color: textColor }}>{label}</button>\n    </div>\n}\n\nexport default Button","import React from 'react';\nimport './styles.scss';\nimport { FaMapMarkerAlt as Map, FaRegUser as Contact } from 'react-icons/fa';\nimport { RiDashboardLine as Dashboard, RiBarChartBoxLine as Report } from 'react-icons/ri';\nimport { IoMdBriefcase as Deal, IoIosBusiness as Account } from 'react-icons/io';\nimport { MdSearch as Search, MdAdd as Add, MdSettings as Settings } from 'react-icons/md';\nimport { Avatar } from '../../components';\n\nconst nav = [\n    { label: 'Dashboard', icon: <Dashboard /> },\n    { label: 'Accounts', icon: <Account /> },\n    { label: 'Contacts', icon: <Contact /> },\n    { label: 'Deals', icon: <Deal /> },\n    { label: 'Reports', icon: <Report /> }\n\n]\nexport default function Sidebar() {\n    return (\n        <nav className=\"sidebar\">\n            <div className=\"sidebar-wrapper\">\n                <div className='logo'>\n                    <Map />\n                    <div>\n                        mapmycustomers\n                    </div>\n                </div>\n                <div className=\"navigation-items\">\n                    {nav.map(navItem => <div key={navItem.label} className=\"nav-item\">\n                        {navItem.icon}\n                        <div>\n                            {navItem.label}</div>\n                    </div>)}\n                </div>\n                <div className=\"menu-items\">\n                    <Search />\n                    <Add />\n                    <Settings />\n                    <Avatar />\n                </div>\n            </div>\n        </nav>\n\n    )\n}","import React from 'react';\nimport { FiMap as MapView, FiList as ListView } from 'react-icons/fi';\nimport { FaFilter as FilterIcon } from 'react-icons/fa'\nimport { Button, Filter, Search, VirtualizedTable } from '../../components';\n\nimport './styles.scss';\n\nexport default function MainContent({ users }) {\n    return (\n        <nav className=\"page-wrapper\">\n            <div className=\"page-info\">\n                <div className=\"record-count\">\n                    {users.length} Accounts\n                </div>\n                <div className=\"views\">\n                    <div className='view-button'> <MapView /> <div>Map View</div></div>\n                    <div className='view-button active' active={true}> <ListView /> <div>list View</div></div>\n                </div>\n                <Button label=\"Add Account\" />\n            </div>\n            <div className='table-section'>\n                <div className='filters'>\n                    <div>\n                        <Filter label='Owner' value='All Members' />\n                        <Filter label='Groups' value='All Groups' />\n                        <Filter label='Radius' value='4 miles' />\n                        <FilterIcon className=\"filter-icon\" />\n                        <div>More Filters</div>\n                    </div>\n                    <div>\n                        <Search />\n                        <Button textColor='#3063e4' color='#758dd53d' label=\"Export to CSV\" />\n                    </div>\n\n\n                </div>\n                <div className='table'>\n                    {users.length > 0 && <VirtualizedTable users={users} />}\n\n                </div>\n            </div>\n        </nav>\n\n    )\n}","import React, { useState, useEffect } from 'react';\nimport Faker from 'faker'\nimport './App.scss';\nimport { Sidebar, MainContent } from './containers'\n\n\nconst App = () => {\n  const [ users, setUsers ] = useState([])\n\n  useEffect(() => {\n    let usersList = []\n    for (let i = 0; i < 40; i++) {\n      const user = {\n        name: Faker.name.firstName(),\n        company: Faker.company.companyName(),\n        email: Faker.internet.email(),\n        phoneNumber: Faker.phone.phoneNumber(),\n        city: Faker.address.city(),\n        state: Faker.address.state(),\n        revenue: Math.random(100000, 10000000)\n      }\n      usersList.push(user)\n    }\n    setUsers(usersList)\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <MainContent users={users} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}